[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To Sidestreams",
    "section": "",
    "text": "Welcome to Sidestreams, where the developers post tips and stories relating to the tidywater R package."
  },
  {
    "objectID": "posts/welcome/index.html#what-is-tidywater",
    "href": "posts/welcome/index.html#what-is-tidywater",
    "title": "Welcome To Sidestreams",
    "section": "What is tidywater?",
    "text": "What is tidywater?\nTidywater is a free, open source R package containing drinking water quality models. Tidywater is available on CRAN and can easily be installed in RStudio using install.packages(\"tidywater\"). All models are publicly available. For references on all models, please see the public GitHub repository  here."
  },
  {
    "objectID": "posts/welcome/index.html#what-models-are-included",
    "href": "posts/welcome/index.html#what-models-are-included",
    "title": "Welcome To Sidestreams",
    "section": "What models are included?",
    "text": "What models are included?\nHere are some models in version 0.6.2 and how to reference them in your code. Note, this does not include all functions and models in tidywater.\n\n\n\n\n\n\n\n\nModel\nTidywater Function\nWhat it models\n\n\n\n\nTerry biofiltration model\nbiofilter_toc\nDOC removal from biofiltration\n\n\nEdwards coagulation\nchemdose_toc\nDOC removal from coadulation\n\n\nWTP model DBP formation\nchemdose_dbp\nDBP formation based on applied chlorine dose\n\n\nCorrosion and scaling indices\ncalculate_corrosion\naggressiveness, Ryznar, Langelier Saturation, calcium carbonate precipitation potential, Larson Skold, chloride to sulfate mass ratio\n\n\nTheoretical lead solubility\ndissolve_pb\nDissolved lead in water"
  },
  {
    "objectID": "posts/intro-vignette/index.html",
    "href": "posts/intro-vignette/index.html",
    "title": "Introduction to tidywater",
    "section": "",
    "text": "The tidywater package can be installed like any other package on CRAN by simply running install.packages(\"tidywater\"). For more details on the package, please see our public GitHub repository  here.\nThis vignette can also be accessed in RStudio by running the following\nlibrary(tidywater)\n\nvignette(\"intro\", package = \"tidywater\")"
  },
  {
    "objectID": "posts/intro-vignette/index.html#defining-a-water",
    "href": "posts/intro-vignette/index.html#defining-a-water",
    "title": "Introduction to tidywater",
    "section": "Defining a water",
    "text": "Defining a water\nThe first step for any modelling project using tidywater is to define your starting water quality. This can be done using the define_water function. This function allows you to input everything you know about your water (pH, alkalinity, temperature, etc.). It also standardizes units for subsequent modelling steps, calculates the carbonate balance from the alkalinity and pH (if provided), and estimates the ionic strength of the water from your inputs. The function then takes all this information and creates a unique object of class “water” (for more details, see  R’s S4 class).\nThe “water” class is the building block of tidywater and allows you to keep track of all the changes in your water through various water treatment processes in a tidy way. Think of the “water” class as a snapshot of everything that is known about a water at each step in a modelling process.\nWhy does tidywater depend on this special class instead of just using a data frame? The water class is a good way to standardize inputs and set up a data structure that would reduce user error. Funneling users through define_water reduces naming errors in downstream functions. It also ensures that all slots have the proper data class. For example, ph must always be a number, and treatment is always a character.\nTo start, let’s create a blank water class and call it empty_water.\n\nempty_water &lt;- define_water()\n\nWarning in define_water(): Missing value for pH. Carbonate balance will not be\ncalculated.\n\n\nWarning in define_water(): Missing value for alkalinity. Carbonate balance will\nnot be calculated.\n\n\nWarning in define_water(): Major ions missing and neither TDS or conductivity\nentered. Ideal conditions will be assumed. Ionic strength will be set to NA and\nactivity coefficients in future calculations will be set to 1.\n\n\nNotice that several warnings are generated about the water class. define_water will return warnings noting the assumptions and limitations of the water class depending on how much information you provided. For example, since we did not provide any information about the water’s pH or alkalinity, the carbonate balance cannot be calculated. Similarly, since we did not provide any information about major ions in the water, information about the water’s hardness and ionic strength are missing.\nEven so, we successfully created our first water class! You can view the first few slots that a water class can contain by printing empty_water. But there are slots for general parameters, carbon content, corrosivity indicators, major cations and anions, and disinfection byproducts (DBPs). Different functions within tidywater will allow you to model all these parameters and more.\n\nprint(empty_water)\n\npH (unitless):  NA \nTemperature (deg C):  25 \nAlkalinity (mg/L CaCO3):  NA \nUse summary functions or slot names to view other parameters.\n\n\nSo let’s add some things to this water that we already know. Let’s say we know pH, alkalinity, temperature, and the sodium concentration. We can define each of these parameters as arguments in define_water, which accepts pH (unitless), alkalinity in units of mg/L CaCO3, temperature in degrees C, and ions in mg/L (with the exception of bromide and manganese, reported as ug/L). The function also refers to all chemical compounds by their chemical symbol or formula. Let’s call the new water class my_water.\nNotice that the slots for ph, alk, temp,and na are now populated when we print out the resulting water. The sodium slot (na) is output in units of mol/L (M). We can also see that define_water automatically calculated the amount of carbonate (co3) and bicarbonate (hco3) in the water based on the alkalinity and pH.\n\nmy_water &lt;- define_water(ph = 7.5, alk = 100, temp = 20, na = 5)\nmy_water\n\npH (unitless):  7.5 \nTemperature (deg C):  20 \nAlkalinity (mg/L CaCO3):  100 \nUse summary functions or slot names to view other parameters.\n\n\nYou can easily summarize your water quality using the summarize_wq function, which takes a water class object and exports an easy-to-read table of the water quality into the console.\n\nsummarize_wq(my_water)\n\n\n\n\n\n\n\n\nGeneral water quality parameters\nResult\nUnits\n\n\n\n\npH\n7.5\n-\n\n\nTemp\n20.0\ndeg C\n\n\nAlkalinity\n100.0\nmg/L as CaCO3\n\n\nTotal_Hardness\nNA\nmg/L as CaCO3\n\n\nTDS\nNA\nmg/L\n\n\nConductivity\nNA\nuS/cm\n\n\nTOC\nNA\nmg/L\n\n\n\n\n\n\n\n\n\nThis is a great way to get started with tidywater for users who only need to model a single water quality. If you have a large data set with multiple water qualities that you want to model, though, this might sound tedious. It wouldn’t be possible to manually enter your pH, alkalinity, temperature, etc. for, let’s say, 5,000 rows. Instead, tidywater has helper functions to generate many water classes simultaneously from an imported data set. See the help_functions_blend vignette for large data processing (paste this in the console: vignette(\"help_functions_blend\", package = \"tidywater\"))."
  },
  {
    "objectID": "posts/intro-vignette/index.html#plotting-and-balancing-ions",
    "href": "posts/intro-vignette/index.html#plotting-and-balancing-ions",
    "title": "Introduction to tidywater",
    "section": "Plotting and balancing ions",
    "text": "Plotting and balancing ions\nBack to our single use case, you’ll notice one of the warnings alerts the user to missing cations and/or anions, and that you should use balance_ions to correct this. This is based on the electroneutrality principle which states that the charges of all the cations and anions in a water should add up to 0. If your water is missing any ions, it is likely that it isn’t balanced. This could cause the results of your model to be off.\nTo check, you can use the plot_ions function on our water object to see what the current ion balance looks like. You can see that cation and anion bars are not equal, so this is not very realistic.\n\nplot_ions(my_water)\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_text()`).\n\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_text_repel()`).\n\n\n\n\n\n\n\n\n\nTo correct this, the balance_ions function automatically adds in sodium, potassium, chloride, or sulfate until anions + cations = 0. Let’s see what happens to the ion plot when we use balance_ions to estimate the missing ion concentrations.\n\nbalanced_water &lt;- my_water %&gt;% balance_ions()\nplot_ions(balanced_water)\n\n\n\n\n\n\n\n\nGreat! balance_ions added potassium to my_water so it is now electrically neutral. To see how much potassium was added, you can use the “@” symbol with a water class object to access the slot you want, in this case, potassium.\n\nmy_water@k # We did not input any potassium in the original water\n\n[1] NA\n\nbalanced_water@k # The balanced water now contains 0.00178 M of potassium\n\n[1] 0.001780775"
  },
  {
    "objectID": "posts/intro-vignette/index.html#converting-units",
    "href": "posts/intro-vignette/index.html#converting-units",
    "title": "Introduction to tidywater",
    "section": "Converting units",
    "text": "Converting units\nThe potassium units are in M. What if you want to know what that is in mg/L? There are two ways to do this in tidywater. The easiest way is to use the summarize_wq function shown above, which converts the ion concentrations back to mg/L.\nAnother option is to use the convert_units function, which allows you to specify the chemical and the starting and ending units. In this case, we want to convert the potassium concentration in balanced_water from M to mg/L.\n\nconvert_units(value = balanced_water@k, formula = \"k\", startunit = \"M\", endunit = \"mg/L\")\n\n[1] 69.62529"
  },
  {
    "objectID": "posts/intro-vignette/index.html#modelling-assumptions",
    "href": "posts/intro-vignette/index.html#modelling-assumptions",
    "title": "Introduction to tidywater",
    "section": "Modelling assumptions",
    "text": "Modelling assumptions\nThere are a couple of assumptions that define_water makes to be able to set up the data for downstream tidywater functions. These include standard ratios for hardness and DOC.\n\nHardness\nFirst, when only you only know the total hardness of the water (tot_hard), calcium hardness (ca_hard) is assumed to be 65% of the total, which is about average for  U.S. drinking water. When only ca_hard is provided, tot_hard is assumed to be equal to calcium hardness/0.65. Magnesium hardness (mg_hard) is then calculated as total hardness - calcium hardness.\nLet’s look at this using define_water. We can use convert_units to get the output in standard units of hardness. By defining only the total hardness, we see that the water vector also contains estimates for calcium and magnesium.\n\n# Calculate hardness or calcium hardness\nhard_water &lt;- define_water(8, 20, 100, tot_hard = 150)\n\n# total hardness in mg/L CaCO3\nhard_water@tot_hard\n\n[1] 150\n\n# calcium hardness\nconvert_units(value = hard_water@ca, formula = \"ca\", startunit = \"M\", endunit = \"mg/L CaCO3\")\n\n[1] 97.5\n\n# magnesium hardness\nconvert_units(value = hard_water@mg, formula = \"mg\", startunit = \"M\", endunit = \"mg/L CaCO3\")\n\n[1] 52.5\n\n\n\n\nTotal and dissolved organic carbon\nTOC and DOC inputs operate similarly to hardness. TOC and DOC are important to know for modelling and predicting various water treatment processes. If you only know TOC, define_water applies a standard conversion to estimate DOC, and vice versa. If only toc is provided, doc is assumed to be 95% of the TOC. If only doc is provided, toc is assumed to be DOC/0.95. This ratio would generally be an acceptable estimate for most drinking water scenarios, but the amount of TOC that is dissolved in raw waters could vary widely. Westerhoff and Anning, 2000 reported a range of 10-100% dissolved TOC in 25 surface waters, so keep in mind that the standard conversion may not be right for your context.\n\n# Calculate TOC and DOC\ntoc_water &lt;- define_water(8, 20, 100, toc = 3)\ntoc_water@toc # mg/L\n\n[1] 3\n\ntoc_water@doc # mg/L\n\n[1] 2.85\n\ndoc_water &lt;- define_water(8, 20, 100, doc = 1.3)\ndoc_water@toc # mg/L\n\n[1] 1.368421\n\ndoc_water@doc # mg/L\n\n[1] 1.3\n\n\nOverall, tidywater helps you model scenarios with as little information as possible because we often don’t have all the data we would like, but the less you have to assume about your water, the better. It’s important to understand and list the assumptions you are making during any modelling effort.\nCheck out our other vignettes to learn more about tidywater’s functions for modelling softening, coagulation, DBP formation…. here ____."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sidestreams",
    "section": "",
    "text": "Three ways to find out if your water is haunted…\n\n\n…by challenging organics\n\n\n\ntoc\n\n\ntreatment\n\n\n\n\n\n\n\n\n\nNov 18, 2024\n\n\nSierra Johnson\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to tidywater\n\n\nHow to implement package models in your analysis.\n\n\n\nintro\n\n\n\n\n\n\n\n\n\nNov 5, 2024\n\n\nLibby McKenna\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To Sidestreams\n\n\n\n\n\n\nwelcome\n\n\n\n\n\n\n\n\n\nNov 1, 2024\n\n\nLibby McKenna\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/haunted-water/index.html",
    "href": "posts/haunted-water/index.html",
    "title": "Three ways to find out if your water is haunted…",
    "section": "",
    "text": "Total organic carbon (TOC) is a bulk measurement that indicates the amount of organic matter in a water. However, properties of organic matter can vary widely. You may have heard terms like “humic” or “fulvic” fractions to describe different types of TOC. There are several analytical methods that can help uncover different TOC properties, such as fluorescence or size fractionation. But for most water treatment plants, we’re concerned about two main questions: TOC removal and disinfection byproduct (DBP) formation. Using historical data directly can be challenging because there are many water quality and operational parameters that impact how well TOC is removed and how much DBPs will form. Luckily, we have empirical models that can help understand plant performance and correct for these factors.\nThis description assumes you already have a basic knowledge of tidywater. If you don’t know how to create a water or how to connect functions togethers, start with the “getting started” vignette.\nWe’ll start by looking at these functions for one condition. We’ll begin by defining a water that has all the parameters we need for modeling.\n\nstart_water &lt;- define_water(ph = 7.4, temp = 12, alk = 80, tds = 100,\n                          toc = 3, doc = 2.8, uv254 = .1, br = 50)\n\nsummarize_wq(start_water, params = c(\"general\"))\n\n\n\n\n\n\n\n\nGeneral water quality parameters\nResult\nUnits\n\n\n\n\npH\n7.40\n-\n\n\nTemp\n12.00\ndeg C\n\n\nAlkalinity\n80.00\nmg/L as CaCO3\n\n\nTotal_Hardness\nNA\nmg/L as CaCO3\n\n\nTDS\n100.00\nmg/L\n\n\nConductivity\n156.25\nuS/cm\n\n\nTOC\n3.00\nmg/L\n\n\n\n\n\n\n\n\n\nThe two functions we’ll be using today are:\n\nchemdose_toc, which predicts the TOC removal from coagulation using the Edwards (1997) model.\nchemdose_dbp, which predicts the DBP formation from disinfection using the Amy model.\n\nWe also use chemdose_ph to account for pH changes from chemical addition. Often, we don’t need this function when we’re dealing with historical data because we have real measured pH at different points in the treatment process.\n\ncoag_water &lt;- start_water %&gt;%\n  chemdose_ph(alum = 30) %&gt;%\n  chemdose_toc(alum = 30)\n\nfin_water &lt;- coag_water %&gt;%\n  chemdose_ph(naocl = 4) %&gt;%\n  chemdose_dbp(cl2 = 2, time = 2, treatment = \"coag\")\n\nWarning in chemdose_dbp(., cl2 = 2, time = 2, treatment = \"coag\"): Temperature\nis outside the model bounds of temp=20 Celsius for coagulated water.\n\n\nWarning in chemdose_dbp(., cl2 = 2, time = 2, treatment = \"coag\"): pH is\noutside the model bounds of pH = 7.5 for coagulated water\n\nprint(paste(\"Coag DOC =\", round(coag_water@doc, 1), \"mg/L\"))\n\n[1] \"Coag DOC = 2.1 mg/L\"\n\nprint(paste(\"TTHM =\", round(fin_water@tthm), \"ug/L\"))\n\n[1] \"TTHM = 18 ug/L\"\n\n\nSo we can get some model outputs, but how does this tell us anything about our water? For that, we need to look at our historical data. We created some example data, but for a real analysis, this is when you would need to do data read-in and cleanup.\nThis first question we want to answer (to know if our water is “haunted”) is: Is my TOC hard to remove? By answering this question, we can understand the applicability of these empirical models and whether additional treatment (such as pre-ozone) would help. To answer this question, we want to apply chemdose_toc to our historical data using the _chain family of functions. First, we’ll have to set up the columns, including a new UV column. Since we don’t have historical UV data, we can assume a SUVA and calculate UV.\nNote that we don’t use chemdose_ph in this case because we have the coagulation pH in our historical data. We’re also treating TOC and DOC as interchangable because they are usually close and DOC wasn’t measured.\n\ncolnames(hist_data)\n\n[1] \"raw_toc\"   \"fin_toc\"   \"coag_ph\"   \"fin_ph\"    \"cl2_dose\"  \"alum_dose\"\n[7] \"tthm\"     \n\ncoag_model &lt;- hist_data %&gt;%\n  # Creating new columns to feed into define_water_chain\n  mutate(doc = raw_toc,\n         ph = coag_ph,\n         alum = alum_dose) %&gt;%\n  mutate(suva_raw = 2,\n         uv254 = suva_raw / 100 * doc) %&gt;%\n  define_water_chain(\"precoag\") %&gt;%\n  chemdose_toc_chain(\"precoag\", \"coag\") %&gt;%\n  # Pull out parameters of interest\n  pluck_water(\"coag\", \"doc\")\n\nWarning: There were 36 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `precoag = furrr::future_pmap(., define_water)`.\nCaused by warning in `...furrr_fn()`:\n! Missing value for alkalinity. Carbonate balance will not be calculated.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 35 remaining warnings.\n\n# Plot actual vs modeled coagulated DOC\n\nggplot(coag_model, aes(x = fin_toc, y = coag_doc)) +\n  geom_point() +\n  geom_abline() +\n  coord_cartesian(xlim = c(0, NA), ylim = c(0, NA)) +\n  theme_bw() +\n  labs(x = \"Actual TOC\", y = \"Modeled TOC\")\n\n\n\n\n\n\n\n\nIn a plot like this, anything above the 1:1 line means that the model is predicting “worse” removal than we are actually seeing and below the 1:1 line means that the model is predicting “better” removal. So if most of your data is below the line, your TOC is more recalcitrant to removal than the waters used to create the model - more “challenging” than a typical source water. If you are close to the line, you can use the model to get a pretty good prediction of coagulation performance.\nThe next question we want to ask is: Are there conditions that make my TOC easier or harder to remove?\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]